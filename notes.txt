Further Advanced Python
=======================
November 13-17 2023

Toby Dussek

Any question, comment or interjection is welcome at any time

9:30  start
11:00 coffee
12:30 lunch until 1:30
3:00  tea break
4:30  end

repo https://github.com/onionmccabbage/furtherAdvancedPythonNov2023_Athlone

Monday
> welcome
- we will be installing additional packages as needed
> design patterns (and anti-patterns)
> constructor pattern
> Abstract Base Class
> using slots (if using ABC, decalre slots in abstract AND concrete)
> overriding built-ins inc __str__ and __repr__
> conventions
  - as will all languages, identifiers can use letters, numbers and underscore (don't start with a number)
  - by convention, ClassesUsePascalCase, methodsUsePascalCase, identifiers_use_snake_case
> decorator pattern (using @)
> factory and facade patterns
> command pattern
> after lunch review exercise
> immediate Python
> proxy pattern

Tuesday
> how to access the course recordings 
  https://s3.eu-west-1.amazonaws.com/neueda.conygre.com/Sites/Beyond_A_Python/site/index.html
  recording username neueda c0nygre
> functional design
- we will need Jupyter Notebooks later in the week
> state pattern (mutability)
> observables and subscribers (this is very fashionable just now)
- RxPY https://rxpy.readthedocs.io/en/latest/index.html
       https://rxmarbles.com/
- concurrency and parallel code
- summary of design patterns
> the GIL (cpython has a restriction)
  see https://realpython.com/python-gil/
> thread functions and thread classes
> thread locks/rlocks/semaphores
> semaphore quantity
> after lunch review exercise

Wednesday
> custom thread decorator to make classes and methods thread safe
> daemon thread, thread events
> multiprocessing
> performance and timing (timeit)
> profiling with @profile and cProfile
> after lunch review exercise
> why use a thread or a process
> generators
> async/await and asyncio
> prepare for Thursday

Thursday
- cpython (c), jython (java), ironpython (.net), ipython (c)
- Data Analysis
- options for Jupyter Notebooks:
  - use Anaconda
  - pip install notebook
  - just use existing VSCode (or similar)
  - use cloud
- Python for Data Analysis
  we will need:
  - jupyter notebooks
  - numpy 
  - pandas
  - matplotlib
	The easiest way to get all the bits and bobs is to use Anaconda
  Data sources (csv, xlsx, text, db, url...)
> using Jupyter notebooks
   you can 'pip install jupyter' then start it with 'python -m notebook'
   then you will also need to pip install numpy, pandas etc.
> numpy and data structures: the arange and array 
> pandas: series and data-frame
  NaN, creating stuctures, analysis (stats)
- data cleansing and preparation
> grouping and aggregating data
- descriptive statistics
> handling files and remote data
> after lunch review exercise
- careful: exporting a notebook does not add 'print' statements

Friday
- data vizualisation with matplotlib
- statistical analysis and correlation
  REMEMBER: correlation does NOT prove CAUSATION
- review of microservices (inc. multi threading)
- Flask: running as dev or prod server (performance and security)
  to run as a debug server: flask --app my_flask.py --debug run
  or else debug=True in the app declaration
  see https://flask.palletsprojects.com/en/2.3.x/
- after lunch review exercise
- end of course feedback


Some Websites
   https://www.geeksforgeeks.org/python-design-patterns/
   https://python-patterns.guide/
   https://rxpy.readthedocs.io/en/latest/ 
   https://pypi.org/project/memory-profiler/
   https://pynative.com/python-exercises-with-solutions/
   https://www.geeksforgeeks.org/python-exercises-practice-questions-and-solutions/
   https://www.practicepython.org/exercises/

